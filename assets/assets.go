// Code generated by go-bindata. DO NOT EDIT.
// sources:
// res/Caprine.lnk (1.793kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _caprineLnk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x94\x5d\x48\x5b\x67\x18\xc7\x7f\x59\x14\xa7\x83\xcd\x31\x91\x29\x0e\x0f\x63\x91\x8d\x91\x98\x64\x89\x9a\xc0\x40\xc9\x07\x11\x8f\x26\x24\xcb\x50\x38\x83\x1d\x93\x43\x0c\x26\x39\x67\x27\x11\x74\x17\x83\xed\x46\x27\xdb\xcd\x36\xf6\x71\x31\x94\x52\xa8\x85\x56\x68\x2f\x7a\x63\x29\xbd\xee\x45\xb1\x60\xe9\x17\xd4\x5a\x28\xc5\x42\x2b\xb4\x17\xa5\x50\x4a\x39\x6f\x22\xc4\x8f\xd2\xab\x42\x29\xfd\xc3\x39\xef\x79\x9f\xf7\x79\xfe\xcf\xff\xfc\xcf\xe1\x91\x01\x5b\xdb\x3b\x58\x38\x2f\xee\x44\xaf\x0c\x82\x04\xc4\xbf\xd8\xfc\x60\xe6\xf1\x86\x8d\xef\x9e\x55\x57\xb9\xf2\xe0\xfd\xed\x0d\x9b\x34\xf1\x77\xa3\x95\x68\x63\x2f\xee\xd2\x46\x77\xe2\x56\x7c\x5d\xba\x17\xcc\xb7\x1e\xb9\xfa\x2e\x5f\xba\xdd\xff\x77\xd0\x1b\x0a\x2a\x1c\xc4\xb7\x78\xc4\xfa\xd7\x98\x3d\xdb\x4a\x46\x35\xcc\x7c\x49\x63\x90\x66\x1a\xd8\x39\x67\x45\xad\xcb\x05\x14\x3c\x96\x40\xff\xbe\xfa\x4b\xd7\x26\xc8\xa0\x62\x60\x92\xa7\x84\x06\xb4\x33\x89\x17\x4b\xe0\x2f\x63\x67\x1c\x12\xa1\x2a\xab\x4b\x9b\xd5\x88\x1d\xc2\xfc\xb1\xd7\x62\x96\x0e\x51\x17\xda\xc3\xec\x42\x63\x56\x74\xe8\x04\x46\x81\xae\x9a\x01\x5d\x75\xca\x2c\x33\x3b\x00\xbb\x55\xbf\xd6\xa5\xb4\x02\xe1\xfc\x67\x3f\xcc\x68\x52\x88\x50\x50\xa9\xbd\xa3\x52\xaf\x8a\x1e\x22\x14\xd0\xc8\xa1\x52\xa2\x82\x44\x14\x95\x0c\x1a\x93\xe8\xe8\x4c\x23\x31\x8a\x46\x99\x32\x1a\x25\x72\x68\x98\x48\x64\x45\x6c\x9a\x0a\x3a\x06\x92\x90\x6b\xd0\x42\x88\x20\xca\x3e\x63\x02\xb5\x68\x5a\x70\x98\x94\x45\x86\x89\xca\x8f\xcc\xa1\x30\x24\x6a\xc3\xa8\x54\x50\x51\x90\xd1\x05\x43\x01\x85\x04\x26\x3a\x39\x91\x5d\xac\x55\xd6\x73\x2b\x2f\xb0\xaa\xcd\x0e\x4d\xb0\xec\x48\xa7\x22\xc9\x44\x32\x1e\x1d\x96\x23\x0e\x65\xc8\x30\xc2\x6a\x45\x55\x64\x3d\xa3\x16\x94\x84\xa9\xe7\x4c\xb5\x58\x3e\xdc\x99\x37\x07\x0e\xd2\xa4\x88\x90\x24\x41\x92\x38\x51\x86\x91\x89\xe0\x78\x45\xde\xbf\xc5\xeb\x89\xef\xab\xc3\x61\x79\xbc\xb6\x37\x32\xce\x29\x35\xab\x95\x77\xcf\xb3\xab\xab\x95\xb9\x87\x27\x22\x7f\xfc\x7c\xe7\xf8\xf5\x95\xf9\x86\x4f\xdf\x5b\x20\x97\xd9\xfe\xf0\xbf\x85\x6f\x4e\xdb\x5b\x16\xe5\x97\x9d\xf7\xda\xa0\x19\x96\x7f\x05\x3c\xa9\x44\xea\xf6\xe2\x78\xf4\xac\x3c\x10\x5a\x7b\xfa\xd1\x9f\x3d\xff\x16\x2f\x16\x81\x06\xab\x51\x37\x60\xcd\xbf\x14\x4e\x3c\x38\xf1\xe3\xc4\x2b\x9e\xbe\xa2\x9f\x00\x3e\x7c\x04\x08\xd0\xc7\x00\x7d\xe2\x2c\x80\x1f\x37\x3e\xb1\xf7\x32\x20\x32\xfd\xf8\x70\xe3\xc6\x43\xbf\xa8\xe8\x13\x6c\xd5\x48\x15\x6a\x4d\x48\xfa\x73\x79\x69\x6e\x29\x30\xb2\xb2\xbe\xb5\xe1\xdc\xba\xfc\x28\x02\x34\xee\x0a\xb1\x46\x66\x06\x9d\x22\x2e\xca\xe2\x4f\xce\x62\x8a\xe9\xa6\x63\x32\xc5\x0c\x65\x5c\x07\x46\x7d\x15\x81\x5a\x83\x53\xed\xc5\xf0\xc9\xdf\x8d\xd8\xb1\xd8\xa0\xeb\xe8\xd7\xb3\xbf\x7d\x02\x4c\x59\x09\x31\x60\xf3\x66\xe7\xfd\xf9\x27\x3b\xb1\x7f\x56\x6f\x8c\x34\x5d\xf8\xc9\x5d\xff\x49\x9e\x07\x00\x00\xff\xff\x5f\xbe\xbf\x4b\x01\x07\x00\x00")

func caprineLnkBytes() ([]byte, error) {
	return bindataRead(
		_caprineLnk,
		"Caprine.lnk",
	)
}

func caprineLnk() (*asset, error) {
	bytes, err := caprineLnkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Caprine.lnk", size: 1793, mode: os.FileMode(0666), modTime: time.Unix(1555763542, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x45, 0xef, 0x10, 0x55, 0x46, 0x81, 0x52, 0xfd, 0xb, 0x1, 0x84, 0x67, 0x1a, 0x24, 0xff, 0x20, 0xe5, 0x1, 0xb6, 0xbf, 0x49, 0xf6, 0xa7, 0x8f, 0xbb, 0x68, 0xfa, 0x95, 0x22, 0xf8, 0x38, 0xad}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Caprine.lnk": caprineLnk,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"Caprine.lnk": {caprineLnk, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
